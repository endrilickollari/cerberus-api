basePath: /
definitions:
  auth.LoginRequest:
    properties:
      ip:
        type: string
      password:
        type: string
      port:
        type: string
      username:
        type: string
    required:
    - ip
    - password
    - port
    - username
    type: object
  auth.LoginResponse:
    properties:
      token:
        type: string
    type: object
  docker.Container:
    properties:
      command:
        type: string
      container_id:
        type: string
      created_on:
        type: string
      image:
        type: string
      names:
        type: string
      ports:
        type: string
      status:
        type: string
    type: object
  docker.ContainerDetail:
    properties:
      command:
        items:
          type: string
        type: array
      created:
        type: string
      host_config:
        $ref: '#/definitions/docker.HostConfig'
      id:
        type: string
      image:
        type: string
      labels:
        additionalProperties:
          type: string
        type: object
      mounts:
        items:
          $ref: '#/definitions/docker.Mount'
        type: array
      name:
        type: string
      network_mode:
        type: string
      network_settings:
        $ref: '#/definitions/docker.NetworkSettings'
      platform:
        type: string
      ports:
        additionalProperties:
          type: string
        type: object
      restart_policy:
        type: string
      state:
        $ref: '#/definitions/docker.ContainerState'
      status:
        type: string
    type: object
  docker.ContainerRunRequest:
    properties:
      command:
        description: Command to run (overrides default)
        items:
          type: string
        type: array
      detached:
        default: true
        description: Run in detached mode
        type: boolean
      environment:
        additionalProperties:
          type: string
        description: Environment variables
        type: object
      image:
        description: Docker image to run
        type: string
      name:
        description: Optional container name
        type: string
      network:
        description: Network to connect to
        type: string
      ports:
        description: Port mappings
        items:
          $ref: '#/definitions/docker.PortMapping'
        type: array
      restart:
        description: Restart policy (no, always, on-failure, unless-stopped)
        type: string
      volumes:
        description: Volume mappings
        items:
          $ref: '#/definitions/docker.VolumeMapping'
        type: array
    required:
    - image
    type: object
  docker.ContainerRunResponse:
    properties:
      container_id:
        description: ID of the created container
        type: string
      name:
        description: Name of the container
        type: string
      status:
        description: Container status (e.g., "created", "running")
        type: string
      warnings:
        description: Any warnings generated during container creation
        items:
          type: string
        type: array
    type: object
  docker.ContainerState:
    properties:
      error:
        type: string
      exit_code:
        type: integer
      finished_at:
        type: string
      paused:
        type: boolean
      restarting:
        type: boolean
      running:
        type: boolean
      started_at:
        type: string
      status:
        type: string
    type: object
  docker.HostConfig:
    properties:
      auto_remove:
        type: boolean
      cap_add:
        items:
          type: string
        type: array
      cap_drop:
        items:
          type: string
        type: array
      dns:
        items:
          type: string
        type: array
      privileged:
        type: boolean
      publish_all_ports:
        type: boolean
      restart_policy:
        type: string
    type: object
  docker.Image:
    properties:
      created:
        type: string
      digest:
        type: string
      image_id:
        type: string
      repository:
        type: string
      size:
        type: string
      tag:
        type: string
      vulnerability:
        type: string
    type: object
  docker.ImageDeleteResponse:
    properties:
      deleted:
        description: List of deleted image layers
        items:
          type: string
        type: array
      errors:
        description: List of errors encountered during deletion
        items:
          type: string
        type: array
      untagged:
        description: List of untagged images
        items:
          type: string
        type: array
    type: object
  docker.ImageDetail:
    properties:
      architecture:
        type: string
      author:
        type: string
      cmd:
        items:
          type: string
        type: array
      container:
        type: string
      created:
        type: string
      docker_version:
        type: string
      entrypoint:
        items:
          type: string
        type: array
      env:
        items:
          type: string
        type: array
      exposed_ports:
        additionalProperties:
          type: object
        type: object
      history:
        items:
          $ref: '#/definitions/docker.ImageHistory'
        type: array
      id:
        type: string
      labels:
        additionalProperties:
          type: string
        type: object
      layers:
        items:
          type: string
        type: array
      os:
        type: string
      repo_digests:
        items:
          type: string
        type: array
      repo_tags:
        items:
          type: string
        type: array
      shared_size:
        type: integer
      size:
        type: integer
      virtual_size:
        type: integer
      volumes:
        additionalProperties:
          type: object
        type: object
      working_dir:
        type: string
    type: object
  docker.ImageHistory:
    properties:
      comment:
        type: string
      created:
        type: string
      created_by:
        type: string
      empty_layer:
        type: boolean
    type: object
  docker.Mount:
    properties:
      destination:
        type: string
      mode:
        type: string
      rw:
        type: boolean
      source:
        type: string
      type:
        type: string
    type: object
  docker.NetworkSettings:
    properties:
      endpoint_id:
        type: string
      gateway:
        type: string
      ip_address:
        type: string
      mac_address:
        type: string
      network_id:
        type: string
      network_name:
        type: string
      port_mappings:
        items:
          $ref: '#/definitions/docker.PortMapping'
        type: array
      subnet_mask:
        type: string
      subnet_prefix:
        type: string
    type: object
  docker.PortMapping:
    properties:
      container_port:
        type: string
      host_port:
        type: string
      protocol:
        type: string
    type: object
  docker.VolumeMapping:
    properties:
      container_path:
        description: Path in the container
        type: string
      host_path:
        description: Path on the host
        type: string
      read_only:
        default: false
        description: Mount as read-only
        type: boolean
    type: object
  response.Response:
    properties:
      data: {}
      error:
        type: string
      success:
        type: boolean
    type: object
  server.CPUInfo:
    properties:
      address_sizes:
        type: string
      apicid:
        type: string
      bogomips:
        type: string
      cache_alignment:
        type: string
      cache_size:
        type: string
      clflush_size:
        type: string
      core_id:
        type: string
      cpu_cores:
        type: string
      cpu_family:
        type: string
      cpu_mhz:
        type: string
      cpuid_level:
        type: string
      flags:
        type: string
      fpu:
        type: string
      fpu_exception:
        type: string
      initial_apicid:
        type: string
      microcode:
        type: string
      model:
        type: string
      model_name:
        type: string
      physical_id:
        type: string
      power_management:
        type: string
      processor:
        type: string
      siblings:
        type: string
      stepping:
        type: string
      vendor_id:
        type: string
      wp:
        type: string
    type: object
  server.DiskUsage:
    properties:
      available:
        type: string
      filesystem:
        type: string
      mounted_on:
        type: string
      size:
        type: string
      use_percentage:
        type: string
      used:
        type: string
    type: object
  server.FileSystemEntry:
    properties:
      group:
        type: string
      is_hidden:
        description: Whether the file/directory is hidden (starts with .)
        type: boolean
      last_modified:
        type: string
      mime_type:
        description: MIME type of the file (only for files)
        type: string
      name:
        type: string
      owner:
        type: string
      path:
        type: string
      permissions:
        type: string
      preview:
        description: Preview of text files (first few lines)
        type: string
      size:
        description: Size in bytes, only applicable for files
        type: integer
      type:
        description: '"file", "directory", "symlink", etc.'
        type: string
    type: object
  server.FileSystemListing:
    properties:
      entries:
        items:
          $ref: '#/definitions/server.FileSystemEntry'
        type: array
      path:
        type: string
      recursive:
        type: boolean
    type: object
  server.Library:
    properties:
      architecture:
        type: string
      name:
        type: string
      status:
        type: string
      version:
        type: string
    type: object
  server.ProcessInfo:
    properties:
      command:
        type: string
      cpu_consumption:
        type: string
      process_id:
        type: string
      rss:
        type: string
      started:
        type: string
      stat:
        type: string
      time:
        type: string
      tty:
        type: string
      user:
        type: string
      vsz:
        type: string
    type: object
  server.ServerDetails:
    properties:
      hostname:
        type: string
      kernel_version:
        type: string
      os:
        type: string
      uptime:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API for Cerberus - Remote Server Management
  title: Cerberus API
  version: 2.0.0
paths:
  /docker/container/{container_id}:
    get:
      consumes:
      - application/json
      description: Retrieves detailed information about a specific Docker container
        using docker inspect
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: Container ID
        in: path
        name: container_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Docker container details retrieved successfully
          schema:
            $ref: '#/definitions/docker.ContainerDetail'
        "400":
          description: Invalid container ID
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Container not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get detailed Docker container information
      tags:
      - docker
  /docker/containers:
    get:
      consumes:
      - application/json
      description: Retrieves information about Docker containers from the server
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Docker container information retrieved successfully
          schema:
            items:
              $ref: '#/definitions/docker.Container'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get Docker container information
      tags:
      - docker
  /docker/image/{image_id}:
    delete:
      consumes:
      - application/json
      description: Deletes a Docker image by ID or name
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: Image ID or name:tag
        in: path
        name: image_id
        required: true
        type: string
      - default: false
        description: Force deletion even if image is being used by containers
        in: query
        name: force
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Docker image deleted successfully
          schema:
            $ref: '#/definitions/docker.ImageDeleteResponse'
        "400":
          description: Invalid image ID or name
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete a Docker image
      tags:
      - docker
    get:
      consumes:
      - application/json
      description: Retrieves detailed information about a specific Docker image using
        docker image inspect
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: Image ID or name:tag
        in: path
        name: image_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Docker image details retrieved successfully
          schema:
            $ref: '#/definitions/docker.ImageDetail'
        "400":
          description: Invalid image ID
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Image not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get detailed Docker image information
      tags:
      - docker
  /docker/image/run:
    post:
      consumes:
      - application/json
      description: Creates and runs a new Docker container from an image with optional
        configuration
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: Container configuration
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/docker.ContainerRunRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Container created successfully
          schema:
            $ref: '#/definitions/docker.ContainerRunResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Image not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Run a Docker container
      tags:
      - docker
  /docker/images:
    get:
      consumes:
      - application/json
      description: Retrieves information about all Docker images on the server
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Docker images retrieved successfully
          schema:
            items:
              $ref: '#/definitions/docker.Image'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get Docker images
      tags:
      - docker
  /filesystem/details:
    get:
      consumes:
      - application/json
      description: Retrieves detailed information about a specific file or directory
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: Path to the file or directory
        in: query
        name: path
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: File details retrieved successfully
          schema:
            $ref: '#/definitions/server.FileSystemEntry'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: File not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get file details
      tags:
      - filesystem
  /filesystem/list:
    get:
      consumes:
      - application/json
      description: Retrieves a listing of files and directories at the specified path
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: Path to list (defaults to /)
        in: query
        name: path
        type: string
      - default: false
        description: Whether to list recursively
        in: query
        name: recursive
        type: boolean
      - default: false
        description: Whether to include hidden files/directories
        in: query
        name: include_hidden
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: File system listing retrieved successfully
          schema:
            $ref: '#/definitions/server.FileSystemListing'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: List files and directories
      tags:
      - filesystem
  /filesystem/search:
    get:
      consumes:
      - application/json
      description: Searches for files matching a pattern in the specified directory
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      - description: Path to search in
        in: query
        name: path
        required: true
        type: string
      - description: Search pattern (glob or regex)
        in: query
        name: pattern
        required: true
        type: string
      - default: 10
        description: Maximum search depth
        in: query
        name: max_depth
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Search results retrieved successfully
          schema:
            items:
              $ref: '#/definitions/server.FileSystemEntry'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Search for files
      tags:
      - filesystem
  /login:
    post:
      consumes:
      - application/json
      description: Authenticates user against an SSH server and returns a JWT token
        for subsequent API requests
      parameters:
      - description: SSH login credentials
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged in and token generated
          schema:
            $ref: '#/definitions/auth.LoginResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to connect to SSH server or generate token
          schema:
            $ref: '#/definitions/response.Response'
      summary: Login to SSH and generate JWT token
      tags:
      - authentication
  /server-details:
    get:
      consumes:
      - application/json
      description: Retrieves basic server information like hostname, OS, kernel version,
        etc.
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Server details retrieved successfully
          schema:
            $ref: '#/definitions/server.ServerDetails'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get basic server details
      tags:
      - server
  /server-details/cpu-info:
    get:
      consumes:
      - application/json
      description: Retrieves detailed CPU information from the server
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: CPU information retrieved successfully
          schema:
            items:
              $ref: '#/definitions/server.CPUInfo'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get CPU information
      tags:
      - server
  /server-details/disk-usage:
    get:
      consumes:
      - application/json
      description: Retrieves disk usage information from the server
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Disk usage information retrieved successfully
          schema:
            items:
              $ref: '#/definitions/server.DiskUsage'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get disk usage information
      tags:
      - server
  /server-details/libraries:
    get:
      consumes:
      - application/json
      description: Retrieves information about installed libraries and packages on
        the server
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Installed libraries information retrieved successfully
          schema:
            items:
              $ref: '#/definitions/server.Library'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get installed libraries information
      tags:
      - server
  /server-details/running-processes:
    get:
      consumes:
      - application/json
      description: Retrieves information about running processes on the server
      parameters:
      - description: Bearer <token>
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Running processes information retrieved successfully
          schema:
            items:
              $ref: '#/definitions/server.ProcessInfo'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get running processes information
      tags:
      - server
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
